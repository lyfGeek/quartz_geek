# Default Properties file for use by StdSchedulerFactory
# to create a Quartz Scheduler Instance, if a different
# properties file is not explicitly specified.
#
# ~ ~ ~ 调度器配置。~ ~ ~
#
#org.quartz.scheduler.instanceId 属性和前者一样，也允许任何字符串，但这个值必须是在所有调度器实例中是唯一的，尤其是在一个集群当中，作为集群的唯一 key。假如你想 Quartz 帮你生成这个值的话，可以设置为AUTO 。
# org.quartz.scheduler.instanceName 属性用来区分特定的调度器实例，可以按照功能用途来给调度器起名。
org.quartz.scheduler.instanceName=DefaultQuartzScheduler
org.quartz.scheduler.rmi.export=false
org.quartz.scheduler.rmi.proxy=false
org.quartz.scheduler.wrapJobExecutionInUserTransaction=false
# ~ ~ ~ 线程池配置。~ ~ ~
#
# 线程池的实现类。
org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
# 线程数，至少为 1（无默认值）（一般设置为 1 ~ 100 之间的整数）。
org.quartz.threadPool.threadCount=10
# 线程池优先级。
# public
#class Thread implements Runnable {
#     /**
#     * The minimum priority that a thread can have.
#     */
#    public final static int MIN_PRIORITY = 1;
#
#   /**
#     * The default priority that is assigned to a thread.
#     */
#    public final static int NORM_PRIORITY = 5;
#
#    /**
#     * The maximum priority that a thread can have.
#     */
#    public final static int MAX_PRIORITY = 10;
org.quartz.threadPool.threadPriority=5
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread=true
#
# 作业存储配置。描述了在调度器实例的生命周期中，Job 和 Trigger 信息是如何被存储的。
org.quartz.jobStore.misfireThreshold=60000
#
# 插件配置。满足特定需求用到的 Quartz 插件的配置。
org.quartz.jobStore.class=org.quartz.simpl.RAMJobStore
